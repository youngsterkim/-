// Generated by gencpp from file can_ros/read_can.msg
// DO NOT EDIT!


#ifndef CAN_ROS_MESSAGE_READ_CAN_H
#define CAN_ROS_MESSAGE_READ_CAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace can_ros
{
template <class ContainerAllocator>
struct read_can_
{
  typedef read_can_<ContainerAllocator> Type;

  read_can_()
    : header()
    , read_speed_r1(0.0)
    , read_speed_l1(0.0)
    , read_speed_r2(0.0)
    , read_speed_l2(0.0)
    , read_speed_r3(0.0)
    , read_speed_l3(0.0)
    , read_steering_r1(0.0)
    , read_steering_l1(0.0)
    , read_steering_r2(0.0)
    , read_steering_l2(0.0)
    , read_steering_r3(0.0)
    , read_steering_l3(0.0)  {
    }
  read_can_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , read_speed_r1(0.0)
    , read_speed_l1(0.0)
    , read_speed_r2(0.0)
    , read_speed_l2(0.0)
    , read_speed_r3(0.0)
    , read_speed_l3(0.0)
    , read_steering_r1(0.0)
    , read_steering_l1(0.0)
    , read_steering_r2(0.0)
    , read_steering_l2(0.0)
    , read_steering_r3(0.0)
    , read_steering_l3(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _read_speed_r1_type;
  _read_speed_r1_type read_speed_r1;

   typedef double _read_speed_l1_type;
  _read_speed_l1_type read_speed_l1;

   typedef double _read_speed_r2_type;
  _read_speed_r2_type read_speed_r2;

   typedef double _read_speed_l2_type;
  _read_speed_l2_type read_speed_l2;

   typedef double _read_speed_r3_type;
  _read_speed_r3_type read_speed_r3;

   typedef double _read_speed_l3_type;
  _read_speed_l3_type read_speed_l3;

   typedef double _read_steering_r1_type;
  _read_steering_r1_type read_steering_r1;

   typedef double _read_steering_l1_type;
  _read_steering_l1_type read_steering_l1;

   typedef double _read_steering_r2_type;
  _read_steering_r2_type read_steering_r2;

   typedef double _read_steering_l2_type;
  _read_steering_l2_type read_steering_l2;

   typedef double _read_steering_r3_type;
  _read_steering_r3_type read_steering_r3;

   typedef double _read_steering_l3_type;
  _read_steering_l3_type read_steering_l3;





  typedef boost::shared_ptr< ::can_ros::read_can_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_ros::read_can_<ContainerAllocator> const> ConstPtr;

}; // struct read_can_

typedef ::can_ros::read_can_<std::allocator<void> > read_can;

typedef boost::shared_ptr< ::can_ros::read_can > read_canPtr;
typedef boost::shared_ptr< ::can_ros::read_can const> read_canConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_ros::read_can_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_ros::read_can_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_ros::read_can_<ContainerAllocator1> & lhs, const ::can_ros::read_can_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.read_speed_r1 == rhs.read_speed_r1 &&
    lhs.read_speed_l1 == rhs.read_speed_l1 &&
    lhs.read_speed_r2 == rhs.read_speed_r2 &&
    lhs.read_speed_l2 == rhs.read_speed_l2 &&
    lhs.read_speed_r3 == rhs.read_speed_r3 &&
    lhs.read_speed_l3 == rhs.read_speed_l3 &&
    lhs.read_steering_r1 == rhs.read_steering_r1 &&
    lhs.read_steering_l1 == rhs.read_steering_l1 &&
    lhs.read_steering_r2 == rhs.read_steering_r2 &&
    lhs.read_steering_l2 == rhs.read_steering_l2 &&
    lhs.read_steering_r3 == rhs.read_steering_r3 &&
    lhs.read_steering_l3 == rhs.read_steering_l3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_ros::read_can_<ContainerAllocator1> & lhs, const ::can_ros::read_can_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_ros::read_can_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_ros::read_can_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_ros::read_can_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_ros::read_can_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_ros::read_can_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_ros::read_can_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_ros::read_can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b77f0c78a9630fc35d1d19cc594490ad";
  }

  static const char* value(const ::can_ros::read_can_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb77f0c78a9630fc3ULL;
  static const uint64_t static_value2 = 0x5d1d19cc594490adULL;
};

template<class ContainerAllocator>
struct DataType< ::can_ros::read_can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_ros/read_can";
  }

  static const char* value(const ::can_ros::read_can_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_ros::read_can_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64 read_speed_r1\n"
"float64 read_speed_l1\n"
"float64 read_speed_r2\n"
"float64 read_speed_l2\n"
"float64 read_speed_r3\n"
"float64 read_speed_l3\n"
"float64 read_steering_r1\n"
"float64 read_steering_l1\n"
"float64 read_steering_r2\n"
"float64 read_steering_l2\n"
"float64 read_steering_r3\n"
"float64 read_steering_l3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::can_ros::read_can_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_ros::read_can_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.read_speed_r1);
      stream.next(m.read_speed_l1);
      stream.next(m.read_speed_r2);
      stream.next(m.read_speed_l2);
      stream.next(m.read_speed_r3);
      stream.next(m.read_speed_l3);
      stream.next(m.read_steering_r1);
      stream.next(m.read_steering_l1);
      stream.next(m.read_steering_r2);
      stream.next(m.read_steering_l2);
      stream.next(m.read_steering_r3);
      stream.next(m.read_steering_l3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct read_can_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_ros::read_can_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_ros::read_can_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "read_speed_r1: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_r1);
    s << indent << "read_speed_l1: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_l1);
    s << indent << "read_speed_r2: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_r2);
    s << indent << "read_speed_l2: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_l2);
    s << indent << "read_speed_r3: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_r3);
    s << indent << "read_speed_l3: ";
    Printer<double>::stream(s, indent + "  ", v.read_speed_l3);
    s << indent << "read_steering_r1: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_r1);
    s << indent << "read_steering_l1: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_l1);
    s << indent << "read_steering_r2: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_r2);
    s << indent << "read_steering_l2: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_l2);
    s << indent << "read_steering_r3: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_r3);
    s << indent << "read_steering_l3: ";
    Printer<double>::stream(s, indent + "  ", v.read_steering_l3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_ROS_MESSAGE_READ_CAN_H
