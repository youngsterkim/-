// Generated by gencpp from file fast_lio/Position_state.msg
// DO NOT EDIT!


#ifndef FAST_LIO_MESSAGE_POSITION_STATE_H
#define FAST_LIO_MESSAGE_POSITION_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fast_lio
{
template <class ContainerAllocator>
struct Position_state_
{
  typedef Position_state_<ContainerAllocator> Type;

  Position_state_()
    : header()
    , Positon_x(0.0)
    , Positon_y(0.0)
    , Positon_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , state_vx(0.0)
    , state_vy(0.0)
    , state_vz(0.0)
    , state_wx(0.0)
    , state_wy(0.0)
    , state_wz(0.0)
    , beta(0.0)  {
    }
  Position_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Positon_x(0.0)
    , Positon_y(0.0)
    , Positon_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , state_vx(0.0)
    , state_vy(0.0)
    , state_vz(0.0)
    , state_wx(0.0)
    , state_wy(0.0)
    , state_wz(0.0)
    , beta(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Positon_x_type;
  _Positon_x_type Positon_x;

   typedef double _Positon_y_type;
  _Positon_y_type Positon_y;

   typedef double _Positon_z_type;
  _Positon_z_type Positon_z;

   typedef double _rot_x_type;
  _rot_x_type rot_x;

   typedef double _rot_y_type;
  _rot_y_type rot_y;

   typedef double _rot_z_type;
  _rot_z_type rot_z;

   typedef double _state_vx_type;
  _state_vx_type state_vx;

   typedef double _state_vy_type;
  _state_vy_type state_vy;

   typedef double _state_vz_type;
  _state_vz_type state_vz;

   typedef double _state_wx_type;
  _state_wx_type state_wx;

   typedef double _state_wy_type;
  _state_wy_type state_wy;

   typedef double _state_wz_type;
  _state_wz_type state_wz;

   typedef double _beta_type;
  _beta_type beta;





  typedef boost::shared_ptr< ::fast_lio::Position_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fast_lio::Position_state_<ContainerAllocator> const> ConstPtr;

}; // struct Position_state_

typedef ::fast_lio::Position_state_<std::allocator<void> > Position_state;

typedef boost::shared_ptr< ::fast_lio::Position_state > Position_statePtr;
typedef boost::shared_ptr< ::fast_lio::Position_state const> Position_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fast_lio::Position_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fast_lio::Position_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fast_lio::Position_state_<ContainerAllocator1> & lhs, const ::fast_lio::Position_state_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Positon_x == rhs.Positon_x &&
    lhs.Positon_y == rhs.Positon_y &&
    lhs.Positon_z == rhs.Positon_z &&
    lhs.rot_x == rhs.rot_x &&
    lhs.rot_y == rhs.rot_y &&
    lhs.rot_z == rhs.rot_z &&
    lhs.state_vx == rhs.state_vx &&
    lhs.state_vy == rhs.state_vy &&
    lhs.state_vz == rhs.state_vz &&
    lhs.state_wx == rhs.state_wx &&
    lhs.state_wy == rhs.state_wy &&
    lhs.state_wz == rhs.state_wz &&
    lhs.beta == rhs.beta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fast_lio::Position_state_<ContainerAllocator1> & lhs, const ::fast_lio::Position_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fast_lio

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fast_lio::Position_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fast_lio::Position_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_lio::Position_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_lio::Position_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_lio::Position_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_lio::Position_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fast_lio::Position_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0eb6ac56ba8c9be9c4fd3304c81e013";
  }

  static const char* value(const ::fast_lio::Position_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0eb6ac56ba8c9beULL;
  static const uint64_t static_value2 = 0x9c4fd3304c81e013ULL;
};

template<class ContainerAllocator>
struct DataType< ::fast_lio::Position_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fast_lio/Position_state";
  }

  static const char* value(const ::fast_lio::Position_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fast_lio::Position_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64 Positon_x\n"
"float64 Positon_y\n"
"float64 Positon_z\n"
"float64 rot_x\n"
"float64 rot_y\n"
"float64 rot_z\n"
"float64 state_vx\n"
"float64 state_vy\n"
"float64 state_vz\n"
"float64 state_wx\n"
"float64 state_wy\n"
"float64 state_wz\n"
"float64 beta\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fast_lio::Position_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fast_lio::Position_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Positon_x);
      stream.next(m.Positon_y);
      stream.next(m.Positon_z);
      stream.next(m.rot_x);
      stream.next(m.rot_y);
      stream.next(m.rot_z);
      stream.next(m.state_vx);
      stream.next(m.state_vy);
      stream.next(m.state_vz);
      stream.next(m.state_wx);
      stream.next(m.state_wy);
      stream.next(m.state_wz);
      stream.next(m.beta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fast_lio::Position_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fast_lio::Position_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Positon_x: ";
    Printer<double>::stream(s, indent + "  ", v.Positon_x);
    s << indent << "Positon_y: ";
    Printer<double>::stream(s, indent + "  ", v.Positon_y);
    s << indent << "Positon_z: ";
    Printer<double>::stream(s, indent + "  ", v.Positon_z);
    s << indent << "rot_x: ";
    Printer<double>::stream(s, indent + "  ", v.rot_x);
    s << indent << "rot_y: ";
    Printer<double>::stream(s, indent + "  ", v.rot_y);
    s << indent << "rot_z: ";
    Printer<double>::stream(s, indent + "  ", v.rot_z);
    s << indent << "state_vx: ";
    Printer<double>::stream(s, indent + "  ", v.state_vx);
    s << indent << "state_vy: ";
    Printer<double>::stream(s, indent + "  ", v.state_vy);
    s << indent << "state_vz: ";
    Printer<double>::stream(s, indent + "  ", v.state_vz);
    s << indent << "state_wx: ";
    Printer<double>::stream(s, indent + "  ", v.state_wx);
    s << indent << "state_wy: ";
    Printer<double>::stream(s, indent + "  ", v.state_wy);
    s << indent << "state_wz: ";
    Printer<double>::stream(s, indent + "  ", v.state_wz);
    s << indent << "beta: ";
    Printer<double>::stream(s, indent + "  ", v.beta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAST_LIO_MESSAGE_POSITION_STATE_H
